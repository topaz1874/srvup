{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"a",
				"a_new_list"
			],
			[
				"the",
				"the_list"
			],
			[
				"line",
				"line_breaks"
			],
			[
				"is",
				"is_manager"
			],
			[
				"user",
				"user"
			],
			[
				"redi",
				"redis_url"
			],
			[
				"re",
				"request"
			],
			[
				"get",
				"get_or_create"
			],
			[
				"r",
				"request"
			],
			[
				"margin",
				"margin"
			],
			[
				"border",
				"border-top"
			],
			[
				"font",
				"font-size"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"f",
				"featurette"
			],
			[
				"max",
				"max_length	None"
			],
			[
				"Htt",
				"HttpResponsePermanentRedirect	class"
			],
			[
				"co",
				"correct_answer"
			],
			[
				"question",
				"question_type"
			],
			[
				"lo",
				"login_required	function"
			],
			[
				"Le",
				"LectureQuestion	class"
			],
			[
				"Que",
				"QuestionAnswerInline"
			],
			[
				"L",
				"LectureQuestion	class"
			],
			[
				"for",
				"ForeignKey	class"
			],
			[
				"se",
				"settings	instance"
			],
			[
				"Lecture",
				"LectureCompletion	class"
			],
			[
				"prev",
				"prev_item	statement"
			],
			[
				"nex",
				"next_item	statement"
			],
			[
				"prv",
				"prev_item	statement"
			],
			[
				"fin",
				"finished	statement"
			],
			[
				"Lec",
				"LectureCompletion	class"
			],
			[
				"le",
				"lecture_id	statement"
			],
			[
				"ne",
				"new_view	statement"
			],
			[
				"con",
				"conf	module"
			],
			[
				"base",
				"base_name	statement"
			],
			[
				"file",
				"filename	statement"
			],
			[
				"Question",
				"QuestionManager"
			],
			[
				"Text",
				"TextInput	class"
			],
			[
				"Http",
				"Http404	class"
			],
			[
				"next",
				"next_page	statement"
			],
			[
				"vide",
				"video_file"
			],
			[
				"us",
				"username"
			],
			[
				"help",
				"help_text	''"
			],
			[
				"vid",
				"video_file"
			],
			[
				"get_",
				"get_queryset"
			],
			[
				"new_",
				"new_slug	statement"
			],
			[
				"S3",
				"S3DirectWidget	class"
			],
			[
				"w",
				"widgets	module"
			],
			[
				"cre",
				"create_video_tupe	function"
			],
			[
				"fi",
				"file_string"
			],
			[
				"up",
				"uploadTo"
			],
			[
				"H",
				"Http404	class"
			],
			[
				"Video",
				"VideoForm	class"
			],
			[
				"Vi",
				"VideoForm	class"
			],
			[
				"PRE",
				"pre_save	statement"
			],
			[
				"Vid",
				"Video	class"
			],
			[
				"get_user",
				"get_user_model	function"
			],
			[
				"fr",
				"friends"
			],
			[
				"ip",
				"ip_overload"
			],
			[
				"email_",
				"email_user	statement"
			],
			[
				"EmailF",
				"emailfriends"
			],
			[
				"Em",
				"EmailFriends	class"
			],
			[
				"Ema",
				"EmailSignUp	class"
			],
			[
				"x",
				"x_forwarded_for	statement"
			],
			[
				"ref",
				"ref_id"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"pad",
				"padding-right"
			],
			[
				"tex",
				"text-align"
			],
			[
				"back",
				"background-color"
			],
			[
				"fon",
				"font-size"
			],
			[
				"bacg",
				"background-color"
			],
			[
				"border-",
				"border-radius"
			],
			[
				"margin-",
				"margin-bottom"
			],
			[
				"text",
				"text-decoration"
			],
			[
				"j",
				"jumbotron"
			],
			[
				"data-",
				"data-toggle"
			],
			[
				"fo",
				"font-variant"
			],
			[
				"bac",
				"background-position"
			],
			[
				"Date",
				"DateTimeField	class"
			],
			[
				"Not",
				"NotificationAdmin	class"
			],
			[
				"No",
				"Notification	class"
			],
			[
				"notifi",
				"notified	statement"
			],
			[
				"ses",
				"ses	module"
			],
			[
				"My",
				"MyLectureView	class"
			],
			[
				"Suggest",
				"SuggestionManager"
			],
			[
				"Sugg",
				"SuggestionManager	class"
			],
			[
				"date",
				"datetime	class"
			],
			[
				"ke",
				"key_list	statement"
			],
			[
				"password",
				"password_reset_done"
			],
			[
				"MEDIA",
				"MEDIA_URL	statement"
			],
			[
				"proje",
				"project	statement"
			],
			[
				"key",
				"key_list_here	statement"
			],
			[
				"Project",
				"ProjectCode	class"
			],
			[
				"com",
				"completed_num"
			],
			[
				"auto_now",
				"auto_now_add"
			],
			[
				"Dat",
				"DateTimeField	class"
			],
			[
				"comp",
				"completed	statement"
			],
			[
				"coo",
				"cookie_time"
			],
			[
				"wi",
				"wistiaEmbed"
			],
			[
				"Subc",
				"subscribed"
			],
			[
				"new",
				"newsletter"
			],
			[
				"Projec",
				"ProjectManager	class"
			],
			[
				"Ht",
				"Http404	class"
			],
			[
				"lecu",
				"lecture_id"
			],
			[
				"chec",
				"check_user_project	function"
			],
			[
				"API",
				"ApiKey	import"
			],
			[
				"AP",
				"ApiKey"
			],
			[
				"api",
				"api_key"
			],
			[
				"Aut",
				"Authorization"
			],
			[
				"Au",
				"Authentication"
			],
			[
				"v1",
				"v1_api"
			],
			[
				"User",
				"UserQuestion	class"
			],
			[
				"class",
				"classmethod	class"
			],
			[
				"Lecu",
				"Lecture	class"
			],
			[
				"ex",
				"exception	param"
			],
			[
				"http",
				"HttpResponseRedirect	class"
			],
			[
				"SOCIAL_AUTH_STR",
				"SOCIAL_AUTH_STRIPE_KEY"
			],
			[
				"pa",
				"patterns	function"
			],
			[
				"sta",
				"start_date"
			],
			[
				"url",
				"urlpatterns	statement"
			],
			[
				"UserType",
				"UserType	class"
			],
			[
				"htt",
				"Http404"
			],
			[
				"wist",
				"wistia_id"
			],
			[
				"changed",
				"changed_file"
			],
			[
				"__o",
				"__original_file"
			],
			[
				"video",
				"videofile"
			],
			[
				"title",
				"title__icontains"
			],
			[
				"rend",
				"render"
			],
			[
				"auto",
				"auto_now_add"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/account/models.py",
			"settings":
			{
				"buffer_size": 4831,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/billing/models.py",
			"settings":
			{
				"buffer_size": 4140,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "from django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\n# from django.core.urlresolvers import reverse\nfrom django.shortcuts import render,HttpResponseRedirect,Http404,redirect\n\nimport braintree\n\nfrom .models import Transaction,Membership,UserMerchantID\nfrom .signals import become_member,membership_date_update\n# Create your views here.\n\nbraintree.Configuration.configure(\n    braintree.Environment.Sandbox,\n    'q3m29r7tg2hj3fx3',\n    'n7frpfxd8453gtn2',\n    '15f9f94d97f31151598663137e05cfe1'\n)\nPLAN_ID = \"monthly_plan\"\n\ndef upgrade(request):\n    if request.user.is_authenticated():\n        # generate client token \n\n        next_url = request.GET.get('next')\n        member = request.POST.get('member')\n        month = request.POST.get('month')\n        merchant_customer_id = None\n\n        try:\n            #usermerchantid already created in userprofile post save handler\n            merchant_obj = UserMerchantID.objects.get(user=request.user)\n        except:\n            messages.error(request, \"There was an error with your account. Please contact us.\")\n            return redirect('contact_us')\n        # clicked pay button the request post  would send payment method nonce\n        # update customer payment method\n        # receive payment method token aka credit card token\n        merchant_customer_id = merchant_obj.customer_id\n        merchant_subscription_id =asdfasdf\n        client_token = braintree.ClientToken.generate({\n            \"customer_id\": merchant_customer_id\n            })\n        nonce = request.POST.get('payment_method_nonce', None)\n        if nonce is not None:\n            payment_method_result = braintree.PaymentMethod.create({\n                \"customer_id\": merchant_customer_id,\n                \"payment_method_nonce\": nonce,\n                \"options\": {\n                    \"make_default\": True }\n                })\n            if not payment_method_result.is_success:\n                messages.error(request, \"An error occured: %s\" % (payment_method_result.message))\n                return redirect('upgrade')\n            the_token = payment_method_result.payment_method.token\n\n            # if subscription_id is not none then update subscription\n\n            # else create an subscription\n\n            subscription_result = braintree.Subscription.create({\n                \"payment_method_token\": the_token,\n                \"plan_id\":PLAN_ID,\n                })\n\n            if subscription_result.is_success:\n                payment_type = subscription_result.subscription.transactions[0].payment_instrument_type\n                trans_id = subscription_result.subscription.transactions[0].id\n                sub_id = subscription_result.subscription.id\n                sub_amount = subscription_result.subscription.price\n\n                if payment_type == braintree.PaymentInstrumentType.PayPalAccount:\n                    newtrans = Transaction.objects.create_newtrans(\n                    user=request.user,\n                    transaction_id=trans_id,\n                    amount=sub_amount,\n                    card_type='paypal',)\n                    trans_success = newtrans.success\n                elif payment_type == braintree.PaymentInstrumentType.CreditCard:\n                    credit_card_details = subscription_result.subscription.transactions[0].credit_card_details\n                    card_type = credit_card_details.card_type\n                    last_4 = credit_card_details.last_4\n                    newtrans = Transaction.objects.create_newtrans(\n                    user=request.user,\n                    transaction_id=trans_id,\n                    amount=sub_amount,\n                    card_type=card_type,\n                    last_four=last_4)\n                    trans_success = newtrans.success\n                else:\n                    trans_success = False\n\n                if trans_success:\n                    membership_instance, created = Membership.objects.get_or_create(\n                        user=request.user)\n                    membership_date_update.send(\n                        sender=membership_instance,\n                        new_date_start=newtrans.timestamp,)\n                    messages.success(request, 'Thanks for you support, now you become our site member, enjoy.')\n                    # return HttpResponseRedirect(reverse('history'))\n                    return redirect('history')\n                else:\n                    messages.error(request, 'There was an error with your trans, please contact us.')\n                    return redirect('upgrade')\n            else:\n                error_ms = subscription_result.message\n                messages.error(request, \"An error occured: %s\" % (error_ms))\n                return redirect('upgrade')\n\n        context = {'client_token':client_token}\n        if member:\n            become_member.send(sender=request.user,\n                                month=str(month))\n            messages.success(request, 'Hoho, now you become our site member, enjoy.')\n            return HttpResponseRedirect(next_url)\n        return render(request, 'billing/upgrade.html', context)\n    return Http404\n\n@login_required\ndef history(request):\n    histories = request.user.transaction_set.get_success()\n    return render(request, 'billing/history.html', {'queryset': histories})",
			"file": "src/billing/views.py",
			"file_size": 5301,
			"file_write_time": 131181191930000000,
			"settings":
			{
				"buffer_size": 5344,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 593.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/account",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/analytics",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/billing",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/comment",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/notification",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/srvup",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/video",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/video",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/static"
	],
	"file_history":
	[
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/billing/models.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/billing/admin.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/account/views.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/account/tests.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/billing/upgrade.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/account/models.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/video/category_detail.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/video/views.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/srvup/urls.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/srvup/views.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/comment/views.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/home.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/video/video_detail.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/comment/models.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/billing/views.py",
		"/Users/tangpeng/Library/Application Support/Sublime Text 3/Packages/Anaconda/Default (OSX).sublime-keymap",
		"/Users/tangpeng/Library/Application Support/Sublime Text 3/Packages/SublimeCodeIntel/Default (OSX).sublime-keymap",
		"/Users/tangpeng/Library/Application Support/Sublime Text 3/Packages/Default/Default (OSX).sublime-keymap",
		"/Users/tangpeng/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/Default (OSX).sublime-keymap",
		"/usr/local/lib/python2.7/site-packages/braintree/payment_instrument_type.py",
		"/usr/local/lib/python2.7/site-packages/braintree/error_result.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/javascript.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/db.sqlite3",
		"/Users/tangpeng/Desktop/code/thepiratebay_sx.py",
		"/Users/tangpeng/Library/Application Support/Sublime Text 3/Packages/User/DashDoc.sublime-settings",
		"/Users/tangpeng/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/billing/signals.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/navbar.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/billing/history.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/analytics/models.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/notification/signals.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/srvup/__init__.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/srvup/settings.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/analytics/admin.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/account/admin.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/video/models.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/home_logged_in.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/notification/models.py",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/video/category_list.html",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/analytics/signals.py",
		"/Users/tangpeng/Downloads/kcp_client.json",
		"/Users/tangpeng/Downloads/kcp_clien.json",
		"/Users/tangpeng/Desktop/code/srvup-membership-tp/src/templates/base.html",
		"/Users/jmitch/Desktop/30daysofdjango/5_loops.py",
		"/Users/jmitch/Desktop/30daysofdjango/5_loops",
		"/Users/jmitch/Desktop/xpytests/sub.py",
		"/Users/jmitch/Desktop/30daysofdjango/3_math.py",
		"/Users/jmitch/Desktop/30daysofdjango/2_strings.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/pdfs/tm_details_download.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/accounts/admin.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/team/home.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/team/documents.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/settings/local.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/__init__.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/settings/base.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/Procfile",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/settings/production.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/celery.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/questions/views.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/sidebar.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/lectures/all.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/questions/tasks.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/questions/urls.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/accounts/models.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/team/activity.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/urls.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/teams/urls.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/accounts/urls.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/quiz/views.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/accounts/views.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/teams/views.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/settings/__init__.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/base.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/quiz/user_results_all.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/questions/models.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/questions/all.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/lectures/views.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/welcomeModal.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/navbar.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/accounts/login.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/kpj/views.py",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/accounts/join.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/videos/all.html",
		"/Volumes/My Passport/Dropbox/projects/kpj/kpj/templates/accounts/team.html",
		"/Users/jmitch/Dropbox/cfe/src/projects/cloudfront.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/test_css.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/login/views.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/videos/views.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/footer.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/accounts/models.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/base.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/home.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/static/static_dir/css/signin.css",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/accounts/register.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/login/forms.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/login/models.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/quiz/admin.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/videos/quiz.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/quiz/models.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/videos/models.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/analytics/ajax.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/kpj/views.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/videos/urls.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/kpj/urls.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/core_css.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/navbar.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/kpj/settings/local.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/kpj/settings/base.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/test_js.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/kpj/settings/production.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/login/urls.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/videos/single.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/analytics/models.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/analytics/admin.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/analytics/utils.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/analytics/urls.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/videos/admin.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/questions/admin.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/questions/forms.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/videos/edit_modules.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/videos/edit_lecture.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/accounts/login.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/questions/models.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/videos/forms.py",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/db.sqlite3",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/videos/manage_base.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/videos/upload.html",
		"/Users/jmitch/Dropbox/projects/kpj/kpj/templates/accounts/navbar.html"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 108.0,
		"where_history":
		[
			"<open folders>",
			"/Users/jmitch/Dropbox/cfe/src"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"affected_user",
			"Video",
			"definition",
			"defin",
			"messages",
			"video",
			"get_absolute_url",
			"get_ab",
			"rjust",
			"id",
			"order",
			"next_url",
			"token",
			"next",
			"post_save",
			"myuser",
			"settings",
			"recent_comments",
			"action",
			"render_to_pdf",
			"render_to",
			"TIME_ZONE",
			"send_mail",
			"emai",
			"send_email",
			"celery",
			"download",
			"documents",
			"login_required",
			"staticfile",
			"sidebar",
			"active",
			".footer",
			"option",
			"href='#",
			"href=\"#",
			"join",
			"md",
			"pesticide",
			"td",
			"pricing",
			"all",
			"reset",
			"next",
			"video",
			"model",
			"embed",
			"dropdown",
			"completed",
			"start",
			"quiz",
			"print",
			"id=",
			"action",
			"reverse",
			"alert",
			"error",
			"ask",
			"questions",
			"actions",
			"questions",
			"transcript",
			"Lecture",
			"User",
			"Lecture",
			"reply",
			"min-height",
			"transcriptText",
			"transcriptContainer",
			"transcript",
			"toggleTrans",
			"print",
			"video",
			"remove",
			"update",
			"remove",
			"url",
			"hash",
			"verbose_name",
			"height",
			"top",
			"view",
			"transcript",
			"<i",
			"fa",
			"transcriptText",
			"questions",
			"span",
			"transcript",
			":",
			"currentTime",
			"cookie",
			"current",
			"updated",
			"questions",
			"krtoor6jqe",
			"block",
			"#wistia",
			"id",
			"wistia",
			"lecture",
			"wistia",
			"wisita",
			"url",
			"filename",
			"wistia",
			"id",
			"video",
			"url",
			"projects",
			"filename",
			"password",
			"favicon",
			"fav",
			"bookmark it",
			"share",
			"information",
			"imformation",
			"people",
			"someref",
			"ip",
			"complete",
			"danger",
			"500",
			"1 month",
			"download",
			"progress-bar",
			"access"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"img/apple-touch-icon-152.png",
			"{})",
			"render(request,",
			"render(",
			")",
			"render(request,",
			"Coding For Entrepreneurs",
			"CodingForEntrepreneurs.com",
			"Coding For Entrepreneurs",
			"CodingForEntrepreneurs.com"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/account/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4831,
						"regions":
						{
						},
						"selection":
						[
							[
								4101,
								4115
							]
						],
						"settings":
						{
							"auto_complete": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2123.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/billing/models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4140,
						"regions":
						{
						},
						"selection":
						[
							[
								3856,
								3871
							]
						],
						"settings":
						{
							"auto_complete": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1494.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/billing/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5344,
						"regions":
						{
						},
						"selection":
						[
							[
								1420,
								1420
							]
						],
						"settings":
						{
							"auto_complete": true,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 435.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 136.0
	},
	"pinned_build_system": "",
	"project": "srvup.sublime-project",
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"upgrade",
				"src/templates/billing/upgrade.html"
			],
			[
				"views",
				"src/srvup/views.py"
			],
			[
				"home",
				"src/templates/home.html"
			],
			[
				"models",
				"src/billing/models.py"
			],
			[
				"up",
				"src/templates/billing/upgrade.html"
			],
			[
				"admin",
				"src/billing/admin.py"
			],
			[
				"urls",
				"src/srvup/urls.py"
			],
			[
				"upgr",
				"src/templates/billing/upgrade.html"
			],
			[
				"se",
				"src/srvup/settings.py"
			],
			[
				"set",
				"src/srvup/settings.py"
			],
			[
				"billing",
				"src/billing/views.py"
			],
			[
				"videos",
				"src/video/models.py"
			],
			[
				"settings",
				"src/srvup/settings.py"
			],
			[
				"category",
				"src/templates/video/category_detail.html"
			],
			[
				"cate",
				"src/templates/video/category_list.html"
			],
			[
				"base",
				"src/templates/base.html"
			],
			[
				"na",
				"src/templates/navbar.html"
			],
			[
				"videomodel",
				"src/video/models.py"
			],
			[
				"video",
				"src/templates/video/video_detail.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 228.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
